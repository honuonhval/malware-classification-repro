#+TITLE: Malware Classification Notes
* Motivation
Reproducing results from Malware Classification with Deep Convolutional Neural Networks (kalash2018), focusing on dataset from Microsoft (Dataset can be obtained here https://www.kaggle.com/c/malware-classification/overview)
* Overview
8-bit sequences of the malware binary converted into decimal values, then reshaped into grayscale image.
Architecture is based on VGG-16.
Cross-entropy loss function as cost function
Optimized with SGD
9 families (classes):
1. Ramnit
2. Lollipop
3. Kelihos_ver3
4. Vundo
5. Simda
6. Tracur
7. Kelihos_ver1
8. Obfuscator.ACY
9. Gatak
* Setup
We will follow setting up data to replicate the paper's results (At least as much as possible, for example, code they used to process the byte files isn't available so I've constructed similar process to produce square grayscale image of the byte files.).
Dataset contains both asm and bytes, paper used bytes so we'll do the same.

Only extract .bytes from 7z with
#+BEGIN_SRC shell
7z e -i'!train/*.bytes' -otrain train.7z
#+END_SRC

We end up with 50GB of .bytes files
After processing and zipping up the pngs, zip ends up to be about 14GB (About 17GB unzipped).
* Experiment
10868 samples for training (10873 for testing set)
90% for training
10% for validation

architecture is based on VGG-16 (initialized with pretrained parameters)
with cross-entropy loss for the loss function
stochastic gradient descent

initial learning rate to be 0.001, reduced by a factor of 10 every 20 epochs
weight decay to 0.0005
momentum to 0.9
initalize the parameters in the network with VGG-16 weights (pretrained=True)
randomly shuffle the training data every epoch

run for 25 epochs with batch size of 8
* Results
On training set they achieved accuracy of 98.99%.
My reproduction achieved similar accuracy 99.97%.
